#  This code is a part of X-ray: Generate and Analyse (XGA), a module designed for the XMM Cluster Survey (XCS).
#  Last modified by David J Turner (david.turner@sussex.ac.uk) 26/02/2021, 10:03. Copyright (c) David J Turner

# This XSPEC script template requires quite a few parameters to be filled in, using the Python formatting
#  syntax. It will NOT function as a completely general script, but should work as a semi-general script for fitting
#  with cross-arf information. As in the user can specify what model to use.
# Much of the infrastructure is shared with the 'general_xspec_fit.xcm' script, but this should only be used for
#  annular spectra, with all spectra being fit in one run rather than separately.

# As this script is designed to be populated by a Python script, the single curly braces denote places for the Python
#  .format command to inject a value, and every normal TCL use of curly braces has to be double curly braces

#################################################
# Sourcing external TCL files
#################################################
# The TCl file containing the function that extracts and writes out the final results
source {xsp}

#################################################
# Setting up XSPEC
#################################################
# Turning off caching in the home directory .xspec folder
autosave off

# Set the statistic type to Cash
statistic cstat

# Allow the user to select the abundance table to use
abund {ab}

# The user can also decide which fitting method to use
method {md}

# The source object cosmology is used to setup XSPEC cosmo
cosmo {H0} {q0} {lamb0}

# We want plotting data to be in terms of energies, not channels
setplot energy

# These scripts are running headlessly, so we have to just let XSPEC keep going whenever it asks a question,
#  that's what this command does
query yes

#################################################
# Python supplied variables
#################################################
# This creates a list of lists of spectral file paths. Each list within the outer list represents an annulus, as this
#  particular fitting script template will fit all annuli in one swoop. The lists are in order, so entry 0 is for
#  annulus 0, entry 1 is for annulus 1 etc.
set ann_spec_paths {sp}

# The energy limits applied to the spectra before fitting
set ignore_lo_en {lo_cut}
set ignore_hi_en {hi_cut}

# This sets whether the fit should run a check on the spectra before doing the global fit
set run_pre_check {check}
set check_pars {cps}
set check_pars_lo_lim {cpsl}
set check_pars_hi_lim {cpsh}
set check_pars_err_lim {cpse}

# The name of the model
set model_name {m}

# Need the user's parameter choices, initially in the form of a name list and a value list, then an array
#  Also have lists that define whether a parameter in the model will be linked across different spectra, and whether
#  a parameter is frozen during fitting
set par_names {pn}
set par_values {pv}
set linking {lk}
set freezing {fr}

# This flag is set to true if we are using a multiplicative constant to account for the different normalisations
#  you tend to get from different observations/instruments. If so then the first spectrum's factor will be frozen
#  at one, as long as the first parameter in the par_names list is 'factor'
set norm_scale {ns}
if {{($norm_scale == True) && ([lindex $par_names 0] != "factor")}} {{
    # If the outside world has set norm_scale to True, but the first parameter of the model isn't a constant factor,
    #  then we play it safe and change the norm_scale value so no constant is expected
    set norm_scale False
}} elseif {{($norm_scale == True) && ([lindex $par_names 0] == "factor")}} {{
    # Makes absolutely sure that the start value of the constant is 1 if it is there
    lset par_values 0 1
}}

# The confidence interval for parameter error estimation, I don't quite know what the parameter corresponds to,
#  but the tutorials say that 2.706 is equivalent to the 90% confidence region, 9.0 is equivalent to the 3 sigma
#  range, and 1.0 is equivalent to 1sigma
set delta_fit_stat {el}

# Now the parameters that xga_extract needs
set out_file {of}
set input_redshift {redshift}
set luminosity_confidence {lel}

# This is where the lower and upper energy limits for the luminosity calculations go, xga_extract needs them
set lum_low_lims {lll}
set lum_upp_lims {lul}

# This allows us to specify which nH parameters (with IDs specified in this variable) should be set to zero for
#  the calculation of unabsorbed luminosity in the xga_extract.tcl file. The issue is that some emission
#  models (e.g. mekal) have an intrinsic nH parameter, and they were being zeroed along with the
#  wabs/tbabs/etc. nH parameter
set nh_par_to_zero {nhmtz}
#################################################

exit
