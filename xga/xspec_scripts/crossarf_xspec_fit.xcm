#  This code is a part of X-ray: Generate and Analyse (XGA), a module designed for the XMM Cluster Survey (XCS).
#  Last modified by David J Turner (david.turner@sussex.ac.uk) 26/02/2021, 10:03. Copyright (c) David J Turner

# This XSPEC script template requires quite a few parameters to be filled in, using the Python formatting
#  syntax. It will NOT function as a completely general script, but should work as a semi-general script for fitting
#  with cross-arf information. As in the user can specify what model to use.
# Much of the infrastructure is shared with the 'general_xspec_fit.xcm' script, but this should only be used for
#  annular spectra, with all spectra being fit in one run rather than separately.

# As this script is designed to be populated by a Python script, the single curly braces denote places for the Python
#  .format command to inject a value, and every normal TCL use of curly braces has to be double curly braces

#################################################
# Sourcing external TCL files
#################################################
# The TCl file containing the function that extracts and writes out the final results
source {xsp}

#################################################
# Setting up XSPEC
#################################################
# Turning off caching in the home directory .xspec folder
autosave off

# Set the statistic type to Cash
statistic cstat

# Allow the user to select the abundance table to use
abund {ab}

# The user can also decide which fitting method to use
method {md}

# The source object cosmology is used to setup XSPEC cosmo
cosmo {H0} {q0} {lamb0}

# We want plotting data to be in terms of energies, not channels
setplot energy

# These scripts are running headlessly, so we have to just let XSPEC keep going whenever it asks a question,
#  that's what this command does
query yes

#################################################
# Python supplied variables
#################################################
# This creates a list of lists of spectral file paths. Each list within the outer list represents an annulus, as this
#  particular fitting script template will fit all annuli in one swoop. The lists are in order, so entry 0 is for
#  annulus 0, entry 1 is for annulus 1 etc.
# The inner lists are expected to be in the same ObsID-Instrument order, but as I can't see anyone using this outside
#  of XGA hopefully that will never bite them in the ass
set ann_spec_paths {sp}
# We use the defined list of lists to quickly infer how many annuli we're dealing with here
set num_ann [llength $ann_spec_paths]
# For my own sanity I am just going to make absolutely sure that each annulus has the same number of spectra - which
#  I am taking as a check that every annulus has entries from the same ObsIDs and Instruments
set comp_spec_len [llength [lindex $ann_spec_paths 0]]
for {{set i 1}} {{$i < $num_ann}} {{incr i}} {{
    if {{[llength [lindex $ann_spec_paths $i]] != $comp_spec_len}} {{
        puts "ERROR: Not all annuli have the same number of spectra"
        exit
    }}
}}

# The special sauce of this particular fitting script is the cross-arf capability, so I suppose I should probably
#  store the paths somewhere! This variable is going to be a three-layer deep list I think. Top level will be lists
#  for each annulus, then the next level down will be lists of cross-arf paths for each annular spectrum
set ann_cross_arf_paths {cap}
# For simplicity I will also add a list of RMF paths for each of the annular spectra (this will be of the same
#  structure as ann_spec_paths), so that I have easy access to the matching response for each cross-arf. Each cross-arf
#  is loaded in with the response of the 'source' annulus
set ann_cross_arf_matching_rmf_paths {carp}

# The energy limits applied to the spectra before fitting
set ignore_lo_en {lo_cut}
set ignore_hi_en {hi_cut}

# This sets whether the fit should run a check on the spectra before doing the global fit
set run_pre_check {check}
set check_pars {cps}
set check_pars_lo_lim {cpsl}
set check_pars_hi_lim {cpsh}
set check_pars_err_lim {cpse}
# This differs from the XGA general XSPEC fit - if True then all spectra from an ObsID-Instrument combo will be
#  excluded if ANY annulus spectrum for that ObsID-Instrument fails to pass the checks
set check_pars_exclude_all {cpea}

# The name of the model
set model_name {m}

# Need the user's parameter choices, initially in the form of a name list and a value list, then an array
#  Also have lists that define whether a parameter in the model will be linked across different spectra, and whether
#  a parameter is frozen during fitting
set par_names {pn}
set par_values {pv}
set linking {lk}
set freezing {fr}

# This flag is set to true if we are using a multiplicative constant to account for the different normalisations
#  you tend to get from different observations/instruments. If so then the first spectrum's factor will be frozen
#  at one, as long as the first parameter in the par_names list is 'factor'
set norm_scale {ns}
if {{($norm_scale == True) && ([lindex $par_names 0] != "factor")}} {{
    # If the outside world has set norm_scale to True, but the first parameter of the model isn't a constant factor,
    #  then we play it safe and change the norm_scale value so no constant is expected
    set norm_scale False
}} elseif {{($norm_scale == True) && ([lindex $par_names 0] == "factor")}} {{
    # Makes absolutely sure that the start value of the constant is 1 if it is there
    lset par_values 0 1
}}

# The confidence interval for parameter error estimation, I don't quite know what the parameter corresponds to,
#  but the tutorials say that 2.706 is equivalent to the 90% confidence region, 9.0 is equivalent to the 3 sigma
#  range, and 1.0 is equivalent to 1sigma
set delta_fit_stat {el}

# Now the parameters that xga_extract needs
set out_file {of}
set input_redshift {redshift}
set luminosity_confidence {lel}

# This is where the lower and upper energy limits for the luminosity calculations go, xga_extract needs them
set lum_low_lims {lll}
set lum_upp_lims {lul}

# This allows us to specify which nH parameters (with IDs specified in this variable) should be set to zero for
#  the calculation of unabsorbed luminosity in the xga_extract.tcl file. The issue is that some emission
#  models (e.g. mekal) have an intrinsic nH parameter, and they were being zeroed along with the
#  wabs/tbabs/etc. nH parameter
set nh_par_to_zero {nhmtz}
#################################################


# Here we run a pre-check to see which of the spectra are good enough to actually contribute anything to the fit
# NOTE - THIS DIFFERS FROM THE IMPLEMENTATION IN THE GENERAL FIT METHOD IN ONE KEY WAY. If any annulus spectrum fails
#  the checks, this can (if set by the XGA function filling in this template) exclude ALL annular spectra that
#  originate from the same ObsID-Instrument combo. This would be to avoid biasing some annuli wrt others as different
#  instrument combinations can end up changing the measured temperature.
#################################################
# Running the spectral gauntlet
#################################################
if {{$run_pre_check == True}} {{

    # Here we set up a copy of the freezing list
    set check_freezing $freezing
    # If we have a constant out the front that is designed to help scale the normalisation when doing
    #  simultaneous fits then it has to be frozen for this process - as we're fitting one spectrum at a time
    #  for the checks
    if {{$norm_scale == True}} {{
        lset check_freezing 0 T
    }}

    # Setting up arrays to store the limits in, that way future code can just pass a parameter name and
    #  get the required limit back
    array set check_lo_lim {{}}
    array set check_hi_lim {{}}
    array set check_err_lim {{}}
    for {{set i 0}} {{$i < [llength $check_pars]}} {{incr i}} {{
        set temp_key [lindex $check_pars $i]
        set check_lo_lim($temp_key) [lindex $check_pars_lo_lim $i]
        set check_hi_lim($temp_key) [lindex $check_pars_hi_lim $i]
        set check_err_lim($temp_key) [lindex $check_pars_err_lim $i]
    }}


    set final_ann_spec_paths {{}}
    set final_ann_spec_indexes {{}}
    set final_ann_spec_indexes {{}}
    set final_ann_spec_indexes {{}}
    #############################################
    # Iterating through the annuli
    #############################################
    # This is very similar to the implementation in general_xspec_fit.xcm, but here we are using a for loop to
    #  iterate through the lists containing spectral paths. This is because ann_spec_paths is a list of lists, with
    #  each individual list being for an annulus, and thus equivalent to the 'spec_paths' variable in the general
    #  XGA XSPEC template
    for {{set ai 0}} {{$ai < $num_ann}} {{incr ai}} {{

        set spec_paths [lindex $ann_spec_paths $ai]
        set cross_arf_paths [lindex $ann_cross_arf_paths $ai]
        set cross_arf_rmf_paths [lindex $ann_cross_arf_matching_rmf_paths $ai]

        #############################################
        # Setting up spectra for individual fits
        #############################################

        # Put the number of spectra in a variable
        set num_spec [llength $spec_paths]

        # For loop here to load in all the spectra, iterating over path list
        set counter 1
        foreach pa $spec_paths {{
            # Loads each spectrum into its own data and plot group
            data $counter:$counter $pa
            incr counter
            }}

        # Now we ignore the energy range that we don't want to use, for all loaded spectra
        ignore **:**-$ignore_lo_en **:$ignore_hi_en-**

        # If any channels have been labelled bad, this will discount them from analysis
        ignore bad
        #############################################
        # Setting up model for individual fits
        #############################################
        # Model is defined with default parameters, these will be modified later
        model $model_name
        /*

        # Get the number of parameters in a variable, for iterating through later. To be clear this is the TOTAL
        #  number of parameters across all spectra, so a tbabs*apec for 7 spectra would have 35 parameters
        set num_pars [tcloutr modpar]
        # This sets the number of unique parameters for THE MODEL, whereas num_pars is for the model*number of spectra
        set num_uniq_par [expr {{$num_pars / $num_spec}}]

        # Just combines them into an array, so we can pass a parameter name and get a value and freeze bool. All
        #  link bools will be false because these models are being fit independently of each other. This is probably
        #  more complex than it needs to be but it allowed me to just copy some code I'd already written
        array set par_arr {{}}
        array set link_arr {{}}
        array set freeze_arr {{}}
        for {{set i 0}} {{$i < [llength $par_names]}} {{incr i}} {{
            set temp_key [lindex $par_names $i]
            set temp_contents [array get par_arr]

            # This while loop deals with duplicate keys (which might occur in a two temperature model for instance)
            set key_count 1
            while {{$temp_key in $temp_contents}} {{
                set temp_key [concat [lindex $par_names $i]_$key_count]
                incr key_count
                }}

            set par_arr($temp_key) [lindex $par_values $i]
            # All link parameters are set to False, as these spectra all need to have models fit separately for
            #  the cleaning step
            set link_arr($temp_key) F
            set freeze_arr($temp_key) [lindex $check_freezing $i]
            }}

        # Here we iterate through the parameters and set them up in the XSPEC model
        set sep_cnt 1
        set sep_par_lst {{}}
        for {{set i 1}} {{$i <= $num_pars}} {{incr i}} {{
            set cur_par [lindex [tcloutr pinfo $i] 0]
            if {{$sep_cnt <= $num_uniq_par}} {{
                # This while loop deals with duplicate keys (which might occur in a two temperature model for instance)
                set key_count 1
                while {{$cur_par in $sep_par_lst}} {{
                    set cur_par [concat [lindex [tcloutr pinfo $i] 0]_$key_count]
                    incr key_count
                    }}
                lappend sep_par_lst $cur_par
            }} else {{
                set sep_cnt 1
                set sep_par_lst {{$cur_par}}
            }}

            if {{$i <= $num_uniq_par}} {{
                newpar $i $par_arr($cur_par)
            }} elseif {{$i > $num_uniq_par && $link_arr($cur_par) == "F"}} {{
                newpar $i $par_arr($cur_par)
                }}

            if {{$freeze_arr($cur_par) == "T"}} {{
                freeze $i
            }} else {{
                thaw $i
                }}
            incr sep_cnt
            }}
        #############################################
        # Running fit/errors and checking results
        #############################################

        # This assembles a list of spec paths where each spec name is repeated N times (where N is the number of
        #  parameters in a model - tbabs*apec has 5 for instance), then we move onto the next spec_path
        set par_spec {{}}
        set par_spec_chan {{}}

        set sp_id 1
        foreach sp $spec_paths {{
            set range [split [tcloutr noticed $sp_id] -]
            set num_chan [expr [lindex $range 1] - [lindex $range 0]]
            for {{set i 1}} {{$i <= $num_uniq_par}} {{incr i 1}} {{
                lappend par_spec $sp
                lappend par_spec_chan $num_chan
            }}
            incr sp_id
        }}

        # Run the fits for all models
        fit 100

        # Setting up this path to store spectra which have met one of our criteria, a further checking step is
        #  required after this because if we are checking 2 parameters (kT and norm for instance), then a spectrum
        #  path needs to appear in this list twice so that we know it met the quality check for both parameters
        set good_spec_paths {{}}

        # We iterate through all the parameters, and find which ones we are checking so we can calculate errors for them
        for {{set ipar 1}} {{$ipar <= $num_pars}} {{incr ipar}} {{
            # Find the equivalent parameter name for the current ipar
            scan [tcloutr pinfo $ipar] "%s %s" pname punit

            # Check if that parameter name appears in the list of parameters we're meant to be quality checking
            if {{[lsearch -exact $check_pars $pname] >= 0}} {{
                # We calculate the errors on the individual fits, though only if its a parameter we're checking
                error $delta_fit_stat, $ipar

                # Grab the parameter value, and the lower and upper confidence limits
                scan [tcloutr param $ipar] "%f %f" par_val delta
                scan [tcloutr error $ipar] "%f %f" lo_conf_lim hi_conf_lim

                # Calculate an upper and lower uncertainty from the confidence limits
                set lo_err [expr $par_val-$lo_conf_lim]
                set hi_err [expr $hi_conf_lim-$par_val]

                # Read out the equivalent spectrum path for this particular parameter
                set cur_sp [lindex $par_spec [expr $ipar-1]]
                # And the number of noticed channels for this spectrum
                set cur_chan [lindex $par_spec_chan [expr $ipar-1]]

                # If the parameter meets our quality cuts then the spectrum is added to the good_spec_paths list
                if {{$par_val > $check_lo_lim($pname) && $par_val < $check_hi_lim($pname) && $lo_err < $check_err_lim($pname) && $hi_err < $check_err_lim($pname) && $cur_chan > 10}} {{
                    lappend good_spec_paths $cur_sp
                }}
            }}
        }}
        #############################################
        # Final decision on spectra
        #############################################
        # Just read the number of parameters we're assessing into its own variable
        set num_par_test [llength $check_pars]
        # This list is for the final cleaned spectrum paths, after this final check
        set final_spec_paths {{}}
        set final_spec_indexes {{}}
        # Also need to select the cross-arfs and their matching rmfs to go with - this could be overwritten if the
        #  user has selected the more stringent checking step, but we have to do it here as well in case they haven't
        set final_spec_cross_arf_paths {{}}
        set final_spec_cross_arf_rmf_paths {{}}

        # Each spectrum path must appear num_par_test times in good_spec_paths to make the final cut, otherwise
        #  we know that it didn't pass quality checks for all the parameters we were assessing - we also keep track
        #  of the storage indexes that were accepted, in case the user wants to restrict the list further so if one
        #  ObsID-Instrument combo spectrum is excluded, they all are
        for {{set sp_i 0}} {{$sp_i < $num_spec}} {{incr sp_i}} {{
            # Need to set 'sp' the path of the current spectrum we're considering
            set sp [lindex $spec_paths $sp_i]

            # Just finds the number of instances of the path in the good_spec_path list
            if {{[llength [lsearch -all $good_spec_paths $sp]] == $num_par_test}} {{
                lappend final_spec_paths $sp
                lappend final_spec_indexes $sp_i
                lappend final_spec_cross_arf_paths [lindex $cross_arf_paths $sp_i]
                lappend final_spec_cross_arf_rmf_paths [lindex $cross_arf_rmf_paths $sp_i]
            }}
        }}

        # The fit script has to exit here if no spectra made it past our cleaning
        if {{[llength $final_spec_paths] == 0}} {{
            puts "No acceptable spectra are left after the cleaning step"
            exit
        }}
        #############################################
        # Cleanup step
        #############################################
        # This wipes all existing models, we need to do this before we define the model for the final fit
        model clear
        # And we remove all the spectra that we already have loaded
        data none

        # I delete a bunch of variables that are re-used in the code later, I was having some problems with parameter
        #  linking before I did this, though I'm showing my TCL ignorance a bit as I'm not quite sure why this fixed it
        unset par_arr
        unset link_arr
        unset freeze_arr
        unset sep_par_lst
        unset num_pars
        unset num_uniq_par

        # As we're dealing with these spectra on an annulus-by-annulus basis, we need to append the lists of
        #  spectrum paths and indices to the overall lists we created for them
        lappend final_ann_spec_paths $final_spec_paths
        lappend final_ann_spec_indexes $final_spec_indexes
        lappend final_ann_spec_cross_arf_paths $final_spec_cross_arf_paths
        lappend final_ann_spec_cross_arf_rmf_paths $final_spec_cross_arf_rmf_paths
        #############################################

    }}

    #############################################
    # Stringent checking step
    #############################################
    # In this case the user has decided that they want the extreme cleaning option - where an ObsID-Instrument
    #  combination (say 0201903501-PN for instance) is only used in the overall fits if it passed the checks
    #  in ALL annuli.
    if {{$check_pars_exclude_all == True}} {{
        # As part of the checks above, we produced a list of lists of the 'final' spectrum paths for each
        #  annuli (final_ann_spec_paths), though actually we're going to overwrite that. We also produced a list
        #  of lists of the indexes of the spectrum paths in final_ann_spec_paths.
        # The information about the accepted indices now needs to be pruned, so we select only those indices which
        #  are accepted for every annulus - this does implicitly assume that the spectrum paths are in the same
        #  order for each annulus, which will be the case for XGA populated scripts. The indices that are accepted
        #  for every annulus will be stored in this acc_ind variable
        set acc_ind {{}}

        # This will be a nested for loop, with the top level looping through the indices of the spectra in
        #  each in annulus
        for {{set sp_i 0}} {{$sp_i < $num_spec}} {{incr sp_i}} {{
            # This variable states whether the current index has been accepted for every annulus, we start by assuming
            #  that it has
            set ind_good True
            # Now we cycle through all the annuli
            for {{set sp_a 0}} {{$sp_a < $num_ann}} {{incr sp_a}} {{
                # If the current index DOES NOT appear in the list of accepted indices for the current annulus, then
                #  we have to set the variable that defines whether the current index has been universally accepted to
                #  False - we also break out of the inner loop because there is no need to continue
                if {{[llength [lsearch -all [lindex $final_ann_spec_indexes $sp_a] $sp_i]] == 0}} {{
                    set ind_good False
                    break
                }}
            }}

            # If we made it through the inner loop and ind_good is still True, then we add the current index to the
            #  list of universally accepted indices
            if {{$ind_good == True}} {{
                lappend acc_ind $sp_i
            }}
        }}

        # Now we cycle through our universally accepted indices, and re-create the final_ann_spec_paths list with
        #  our more stringent checking requirements
        set final_ann_spec_paths {{}}
        # We also need to select the relevant cross-arf and rmf paths
        set final_ann_spec_cross_arf_paths {{}}
        set final_ann_spec_cross_arf_rmf_paths {{}}
        # The outer for loop is through the annuli (remember that our original variable of spectrum paths is a list
        #  of lists, one list per annulus).
        for {{set sp_a 0}} {{$sp_a < $num_ann}} {{incr sp_a}} {{
            set final_sel_spec_paths {{}}
            set final_sel_c_arf_paths {{}}
            set final_sel_c_arf_rmf_paths {{}}
            foreach acc_i $acc_ind {{
                lappend final_sel_spec_paths [lindex [lindex $ann_spec_paths $sp_a] $acc_i]
                lappend final_sel_c_arf_paths [lindex [lindex $ann_cross_arf_paths $sp_a] $acc_i]
                lappend final_sel_c_arf_rmf_paths [lindex [lindex $ann_cross_arf_matching_rmf_paths $sp_a] $acc_i]
            }}
            lappend final_ann_spec_paths $final_sel_spec_paths
            lappend final_ann_spec_cross_arf_paths $final_sel_c_arf_paths
            lappend final_ann_spec_cross_arf_rmf_paths $final_sel_c_arf_rmf_paths
        }}
    }}
    #############################################

    # Making sure we alter the original list of annular spectra paths to reflect the checks we've done
    set ann_spec_paths $final_ann_spec_paths
    set ann_cross_arf_paths $final_ann_spec_cross_arf_paths
    set ann_cross_arf_matching_rmf_paths $final_ann_spec_cross_arf_rmf_paths
}}


#################################################
# Setting up spectra for the final fit
#################################################

# For loop here to load in all the spectra, iterating over path list
set data_counter 1
# We start the source counter at 2 as the default source for XSPEC spectra is 1. The counter is
set source_counter 2

# This top level iterates through annuli
for {{set ai 0}} {{$ai < $num_ann}} {{incr ai}} {{
    set cur_ann_paths [lindex $ann_spec_paths $ai]
    set cur_ann_crossarf_set [lindex $ann_cross_arf_paths $ai]
    set cur_ann_crossarf_rmf_paths [lindex $ann_cross_arf_matching_rmf_paths $ai]

    # Now put the number of spectra in a variable
    set num_spec [llength $cur_ann_paths]

    # This iterates through spectrum entries for each annulus
    for {{set pi 0}} {{$pi < $num_spec}} {{incr pi}} {{
        set sp [lindex $cur_ann_paths $pi]
        # Loads each spectrum into its own data and plot group
        data $data_counter:$data_counter $sp

        set ca [lindex $cur_ann_crossarf_set $pi]
        puts $ca
        set ca_rmf [lindex $cur_ann_crossarf_rmf_paths $pi]

        for {{set cai 0}} {{$cai < [expr $num_ann-1]}} {{incr cai}} {{
            set rel_ca [lindex $ca $cai]

            resp $source_counter:$data_counter $ca_rmf
            arf $source_counter:$data_counter $rel_ca
            incr source_counter
        }}
        incr data_counter

    }}
}}


#show
#exit

## Now we ignore the energy range that we don't want to use, for all loaded spectra
#ignore **:**-$ignore_lo_en **:$ignore_hi_en-**
#
## If any channels have been labelled bad, this will discount them from analysis
#ignore bad
##################################################
## Setting up the final model and links
##################################################
## Now we must define the model, but without setting any parameters (thats what /* does)
#model $model_name
#/*
#
## Get the number of parameters in a variable, for iterating through later
#set num_pars [tcloutr modpar]
## This sets the number of unique parameters for THE MODEL, whereas num_pars is for the model*number of spectra
#set num_uniq_par [expr {{$num_pars / $num_spec}}]
#
## Probably isn't necessary as the inputs should be governed by XGA, but doing some checks
#if {{[llength $par_names] != $num_uniq_par}} {{
#    puts "par_names list is not the length expected by the defined model"
#    exit
#}} elseif {{[llength $par_values] != $num_uniq_par}} {{
#    puts "par_values list is not the length expected by the defined model"
#    exit
#}} elseif {{[llength $linking] != $num_uniq_par}} {{
#    puts "linking list is not the length expected by the defined model"
#    exit
#}} elseif {{[llength $freezing] != $num_uniq_par}} {{
#    puts "freezing list is not the length expected by the defined model"
#    exit
#}}
#
## Just combines them into an array, so we can pass a parameter name and get a value, link bool, and freeze bool
#array set par_arr {{}}
#array set link_arr {{}}
#array set freeze_arr {{}}
#for {{set i 0}} {{$i < [llength $par_names]}} {{incr i}} {{
#    # Gets the name of the parameter we're currently dealing with
#    set temp_key [lindex $par_names $i]
#    # Get the current keys of the par_arr
#    set temp_contents [array get par_arr]
#
#    # This while loop deals with duplicate keys (which might occur in a two temperature model for instance)
#    set key_count 1
#    while {{$temp_key in $temp_contents}} {{
#        # Adds a number to the end of the parameter we're currently dealing with
#        set temp_key [concat [lindex $par_names $i]_$key_count]
#        incr key_count
#        }}
#    # Stores the start value, linking, and freezing information under the parameter names in the arrays
#    #  we defined earlier
#    set par_arr($temp_key) [lindex $par_values $i]
#    set link_arr($temp_key) [lindex $linking $i]
#    set freeze_arr($temp_key) [lindex $freezing $i]
#    }}
#
## Here we iterate through the parameters and set them up in XSPEC, including user choices on linking and freezing
#set sep_cnt 1
## sep_cnt keeps track of the current parameter of a given spectrum
#set sep_par_lst {{}}
#for {{set i 1}} {{$i <= $num_pars}} {{incr i}} {{
#    # Grabs the current parameter name, we'll use it to look up start values etc.
#    set cur_par [lindex [tcloutr pinfo $i] 0]
#
#    # As sep_cnt keeps track of the current position within a specific spectrum's model, it cannot be greater than
#    #  the number of parameters per spectrum model (5 for tbabs*apec for instance), so it must be reset to 1
#    #  once it is larger than that number, and we know we've moved onto another spectrum
#    if {{$sep_cnt <= $num_uniq_par}} {{
#        # This while loop deals with duplicate keys (which might occur in a two temperature model for instance)
#        set key_count 1
#        while {{$cur_par in $sep_par_lst}} {{
#            set cur_par [concat [lindex [tcloutr pinfo $i] 0]_$key_count]
#            incr key_count
#            }}
#        lappend sep_par_lst $cur_par
#    }} else {{
#        set sep_cnt 1
#        set sep_par_lst {{$cur_par}}
#    }}
#
#    # If we're still in the first spectrum then the start values MUST be set. Remember that i goes up to the full
#    #  num_pars value (so for tbabs*apec for 7 spectra that number would be 35), but we know that if i is less than
#    #  the number of parameters per spectrum model then we're still on the first spectrum
#    if {{$i <= $num_uniq_par}} {{
#        # Set the start value of the parameter using the handy array we constructed earlier
#        newpar $i $par_arr($cur_par)
#    # If we're past the first spectrum but the current parameter isn't meant to be linked across spectra then we
#    #  must set its starting value. We don't need to do anything if the parameter IS meant to be linked, as that
#    #  will happen automatically
#    }} elseif {{$i > $num_uniq_par && $link_arr($cur_par) == "F"}} {{
#        newpar $i $par_arr($cur_par)
#        }}
#
#    # And finally if the current parameter isn't meant to be able to vary then we must freeze it, or thaw it
#    #  if it should be allowed to vary. If we know that we have a constant at the front to deal with different
#    #  norms for different observations, and that the current parameter is the first model's factor, then we freeze it
#    #  at one, whereas all the rest are allowed to vary
#    if {{($freeze_arr($cur_par) == "T") || (($norm_scale == True) && ($i == 1))}} {{
#        freeze $i
#    }} else {{
#        thaw $i
#        }}
#
#    incr sep_cnt
#    }}
#
#
#
#
#exit
